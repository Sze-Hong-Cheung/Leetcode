//Math
class Solution {
    public int integerBreak(int n) {
        if (n == 2) return 1;
        if (n == 3) return 2;
        int product = 1;
        while (n > 4) {
            product *= 3;
            n -= 3;
        }
        product *= n;
        
        return product;
    }
}


//DP
class Solution {
    public int integerBreak(int n) {
       int[] dp = new int[n + 1];
       dp[1] = 1;
       for(int i = 2; i <= n; i ++) {
           for(int j = 1; j < i; j ++) {
               dp[i] = Math.max(dp[i], (Math.max(j,dp[j])) * (Math.max(i - j, dp[i - j])));
           }
       }
       return dp[n];
    }
}


//Recursive (fastest)
class Solution {
    public int integerBreak(int n) {
        if (n == 2) return 1;
        if (n == 3) return 2;
        HashMap<Integer, Integer> note = new HashMap<Integer, Integer>();
        return maxProduct(n, note);
    }
    private int maxProduct(int num, HashMap<Integer, Integer> note) {
        if (num == 2 || num == 3) return num;
        if (note.containsKey(num)) return note.get(num);
        int max = 1;
        int product = 1;
        for (int i = 2; i < num / 2 + 1; i++) {
            product =  maxProduct(i, note) * maxProduct(num - i, note);
            if (product > max) max = product;
        }
        if (!note.containsKey(num)) note.put(num, max);
        return max;
    }
}
